{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Padr\u00e3o de documenta\u00e7\u00e3o para projetos em Python","text":"<p>Utilize esse modelo para criar a documenta\u00e7\u00e3o dos seus projetos em <code>Python</code>.</p>"},{"location":"#layout-base-do-projeto-pastas-e-arquivos-na-raiz-do-repositorio","title":"Layout base do projeto (pastas e arquivos na raiz do reposit\u00f3rio)","text":"<pre><code>.git/                       # Pasta referente a administra\u00e7\u00e3o de branchs, commits e pre-commits do git.\n.github/                    # Pasta com as configura\u00e7\u00f5es que tangem o reposit\u00f3rio remoto (pol\u00edticas de CI, etc...)\n.venv/                      # Pasta com os arquivos referentes ao ambiente virtual do projeto\n.vscode/                    # Pasta com configura\u00e7\u00f5s da IDE para o projeto (Opcional.)\ndocs/                       # Pasta com os arquivos .md que definem a estrutura da documenta\u00e7\u00e3o\nsrc/                        # Pasta onde se encotram os arquivos de c\u00f3digo fonte do projeto\ntests/                      # Pasta contendo os testes unit\u00e1rios, de funcionalidade e de integra\u00e7\u00e3o\n\n.gitignore                  # Arquivo referente aos arquivos/pastas que n\u00e3o ser\u00e3o trackeados pelo git\n.pre-commit-config.yaml     # Arquivo de configura\u00e7\u00e3o dos hooks de pre-commit do projeto\n.python-version             # Arquivo que orienta o pyenv a setar a vers\u00e3o correta do Python\nLICENCE                     # Arquivo de licen\u00e7a de distribui\u00e7\u00e3o\nmkdocs.yml                  # Arquivo de configura\u00e7\u00e3o do Mkdocs para estruturar a documenta\u00e7\u00e3o do projeto\npyproject.toml              # Arquivo geral do projeto onde constam os autores, o nome do projeto, as dependencias diretas e de desenvolvimento\nREADME.md                   # Arquivo README para setup inicial do projeto\n</code></pre>"},{"location":"libs/","title":"Bibliotecas padr\u00e3o deste projeto","text":"<p>Para garantir os padr\u00f5es de clean code e facilitar a vida do desenvolvedor no ciclo de desenvolvimento de projetos foram elencados algumas bibliotecas padr\u00e3o, esta p\u00e1gina ir\u00e1 descreve-las.</p>"},{"location":"libs/#pyenv","title":"Pyenv","text":"<p>Conforme vamos avan\u00e7ando no desenvolvimento de projetos \u00e9 normal o python avan\u00e7ar e lan\u00e7ar novas vers\u00f5es da linguagem. Este programa facilita a adiministra\u00e7\u00e3o de v\u00e1rias vers\u00f5es do python na sua m\u00e1quina de maneira simples e din\u00e2mica, consulte a documenta\u00e7\u00e3o aqui.</p>"},{"location":"libs/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Instalar o pyenv no windows pode ser algo complicado, siga este tutorial para facilitar o setup.</p>"},{"location":"libs/#utilizacao","title":"Utiliza\u00e7\u00e3o","text":"<p>Voc\u00ea precisa dominar apenas alguns comandos do pyenv:</p> <ul> <li> <p>Listar todas as vers\u00f5es dispon\u00edveis ja lan\u00e7adas do python: <pre><code>pyenv install -l\n</code></pre></p> </li> <li> <p>Instalar vers\u00e3o do python: <pre><code>pyenv install &lt;numero-da-versao-desejada&gt;\n</code></pre></p> </li> <li> <p>Consultar vers\u00f5es do python instaladas na sua m\u00e1quina: <pre><code>pyenv versions\n</code></pre></p> </li> <li> <p>Atribuir vers\u00e3o espec\u00edfica do python em um projeto (execute dentro do diret\u00f3rio do projeto): <pre><code>pyenv local &lt;numero-da-versao-desejada&gt;\n</code></pre></p> <p>Setando vers\u00e3o por projeto</p> <p>Esse comando cria um arquivo <code>.python-version</code> dentro da raiz do seu projeto, utilize sempre esse comando para seu projeto ser executado na vers\u00e3o correta do python.</p> </li> </ul>"},{"location":"libs/#poetry","title":"Poetry","text":"<p>O Poetry \u00e9 uma biblioteca de gerenciamento de depend\u00eancias e ambientes virtuais do python, utilize ele como base para suas instala\u00e7\u00f5es de pacotes do seu projeto. A documenta\u00e7\u00e3o do Poetry pode ser acessada aqui.</p>"},{"location":"libs/#instalacao_1","title":"Instala\u00e7\u00e3o","text":"<p>Voc\u00ea pode utilizar o <code>pip</code> para instalar o poetry na vers\u00e3o do python que voc\u00ea est\u00e1 utilizando: <pre><code>pip install poetry\n</code></pre></p> <p>Pyenv + Poetry</p> <p>Caso voc\u00ea n\u00e3o opte por uma instala\u00e7\u00e3o global do Poetry, voc\u00ea precisar\u00e1 executar o comando acima para cada vers\u00e3o do python que voc\u00ea instalar com o Pyenv. As configura\u00e7\u00f5es do Poetry (que voc\u00ea ver\u00e1 a seguir) s\u00e3o globais por padr\u00e3o.</p>"},{"location":"libs/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>\u00c9 necess\u00e1rio realizar algumas configura\u00e7\u00f5es no poetry para a melhor execu\u00e7\u00e3o dos seus projetos:</p> <ul> <li> <p>Criar os ambientes virtuais dentro do seu projeto: <pre><code>poetry config virtualenvs.in-Project\u00a0true\n</code></pre></p> </li> <li> <p>Identificar qual vers\u00e3o do Python est\u00e1 ativada para o projeto: <pre><code>poetry config virtualenvs.prefer-active-python\u00a0true\n</code></pre></p> </li> </ul>"},{"location":"libs/#utilizacao_1","title":"Utiliza\u00e7\u00e3o","text":"<p>O Poetry utiliza por padr\u00e3o um arquivo de configura\u00e7\u00e3o chamado <code>pyproject.toml</code> ele \u00e9 a base do projeto, ele armazena os meta-dados do projeto, quais bibliotecas ele utiliza, automa\u00e7\u00f5es e \"skips\" do projeto.</p>"},{"location":"libs/#entendendo-as-secoes","title":"Entendendo as se\u00e7\u00f5es","text":"<p>O arquivo <code>pyproject.toml</code> funciona como um <code>requirements.txt</code> com ester\u00f3ides, ele \u00e9 mais organizado, e no mesmo arquivo voc\u00ea pode separar suas bibliotecas por grupos de instala\u00e7\u00e3o, o que \u00e9 de uma imensa ajuda quando vamos fazer deploy em produ\u00e7\u00e3o.</p> <p>Cada \"parte\" do arquivo \u00e9 denominada \"se\u00e7\u00e3o\", cada se\u00e7\u00e3o \u00e9 declarada com um t\u00edtulo que fica entre colchetes e \u00e9 respons\u00e1vel por um atributo do porjeto. Segue exemplo de se\u00e7\u00f5es de depend\u00eancias deste projeto: </p> <p>Cada destaque em vermelho \u00e9 uma se\u00e7\u00e3o, neste caso cada se\u00e7\u00e3o corresponde a uma categoria de depend\u00eancias, desenvolvimento, testes e documenta\u00e7\u00e3o, respectivamente.</p>"},{"location":"libs/#adicionando-bibliotecas","title":"Adicionando bibliotecas","text":"<p>Voc\u00ea pode utilizar o Poetry para adicionar bibliotecas e frameworks de uma forma mais elegante, e de diversas formas:</p> <p>Caso de exemplo</p> <p>Usaremos como exemplo de instala\u00e7\u00e3o a biblioteca polars.</p> <ul> <li> <p>Adicionar o <code>polars</code> nas dependencias principais do projeto: <pre><code>poetry add polars\n</code></pre></p> </li> <li> <p>Adicionar o <code>polars</code> em uma se\u00e7\u00e3o espec\u00edfica de dependencias: <pre><code>poetry add polars --group &lt;id-do grupo&gt;\n</code></pre></p> <p>Exemplo: <pre><code>poetry add polars --group dev   #Adiciona o polars na se\u00e7\u00e3o de desenvolvimento do pyproject.toml\n</code></pre></p> </li> </ul>"},{"location":"libs/#instalando-o-pyprojecttoml","title":"Instalando o <code>pyproject.toml</code>","text":"<p>Com o pyproject no seu projeto, voc\u00ea pode instalar as bibliotecas do seu projeto de maneira simples:</p> <p>Ambientes virtuais</p> <p>Por padr\u00e3o, o Poetry SEMPRE criar\u00e1 um ambiente virtual para instalar as bibliotecas.</p> <ul> <li>Instalar TODAS as depend\u00eancias do seu projeto: <pre><code>poetry install --no-root\n</code></pre></li> </ul> <p>Voc\u00ea tamb\u00e9m pode instalar as bibliotas de cada se\u00e7\u00e3o individualmente:</p> <ul> <li>Instalar somente as bibliotecas da se\u00e7\u00e3o <code>dev</code>: <pre><code>poetry install --no-root --with dev\n</code></pre></li> </ul> <p>Ou ent\u00e3o ignorar as bibliotecas de uma determinada se\u00e7\u00e3o:</p> <ul> <li>Instalar as as bibliotecas do projeto EXCETO as bibliotecas da se\u00e7\u00e3o <code>dev</code>: <pre><code>poetry install --no-root --without dev\n</code></pre></li> </ul>"},{"location":"libs/#entrando-no-ambiente-virtual-para-desenvolvimento","title":"Entrando no ambiente virtual para desenvolvimento","text":"<p>Ap\u00f3s instalar as bibliotecas do seu projeto, basta executar um comando para ativar o ambiente virtual:</p> <pre><code>poetry shell\n</code></pre>"},{"location":"libs/#taskipy","title":"Taskipy","text":"<p>Esta \u00e9 uma lib de abstra\u00e7\u00e3o de comandos, voc\u00ea declara o comando no <code>pyproject.toml</code> e ele traduz isso para um comando do terminal. Documenta\u00e7\u00e3o aqui.</p> <p>Voc\u00ea pode declarar o comando na se\u00e7\u00e3o <code>[tool.taskipy.tasks]</code>: </p> <p>Dentro da se\u00e7\u00e3o destacada em vermelho voc\u00ea pode escrever o nome do comando que voc\u00ea deseja chamar (destaque amarelo), e ent\u00e3o qual comando o Taskipy vai executar (destaque verde).</p> <p>Agora pra chamar cada comando cadastrado voc\u00ea pode usar fun\u00e7\u00e3o <code>task</code>:</p> <pre><code>task &lt;nome-do-comando-no-pyproject&gt;\n</code></pre> <p>Desta forma, ao executar o comando:</p> <pre><code>task docs\n</code></pre> <p>O comando executado no shell ser\u00e1:</p> <pre><code>mkdocs serve\n</code></pre> <p>Automatiza\u00e7\u00e3o</p> <p>Utilize o <code>Taskipy</code> sempre que poss\u00edvel para automatizar suas rotinas!</p>"},{"location":"libs/#mkdocs","title":"Mkdocs","text":"<p>Esta Biblioteca \u00e9 a documenta\u00e7\u00e3o dos nossos projetos aqui na Pavei, \u00e9 com base nela que voc\u00ea est\u00e1 lendo esta documenta\u00e7\u00e3o!</p> <p>Se quiser se aprofundar mais, leia a documenta\u00e7\u00e3o aqui.</p>"},{"location":"libs/#pre-commit-e-commitizen","title":"Pre-commit e Commitizen","text":"<p>Estas libs garantem a coes\u00e3o e boas pr\u00e1ticas no nosso c\u00f3digo, juntas elas facilitam a documenta\u00e7\u00e3o, o versionamento do c\u00f3digo e garante que outro usu\u00e1rio consiga continuar no trabalho com qualidade.</p>"},{"location":"libs/#pre-commit","title":"Pre-commit","text":"<p>Esta lib cadastra os <code>hooks</code> que determinam quais as premissas que o c\u00f3digo precisa seguir antes de ser commitado na branch.</p> <p>Os hooks do projeto podem ser encontrados em <code>.pre-commit-config.yaml</code>.</p> <p>Pre-commit</p> <p>Utilize as orienta\u00e7\u00f5es do Pre-commit SEMPRE, assim garantimos que o melhor c\u00f3digo est\u00e1 subindo para a produ\u00e7\u00e3o. Nossos processos dependem disso!</p>"},{"location":"libs/#commitzen","title":"Commitzen","text":"<p>O Commitzen \u00e9 uma biblioteca que transforma os commits b\u00e1sicos do git em <code>commits sem\u00e2nticos</code>.</p> <p>Ao finalizar seu desenvolvimento voc\u00ea pode executar o comando: <pre><code>task commit\n</code></pre></p> <p>Assim, ao inv\u00e9s de uma mensagem simples ao commitar, o desenvolvedor precisar\u00e1 descrever algumas caracter\u00edsticas adicionais do seu commit:</p> <ul> <li> <p>O tipo de mudan\u00e7a que voc\u00eas est\u00e1 realizando no c\u00f3digo: </p> </li> <li> <p>Quais arquivos foram alterados</p> </li> <li>Um breve resumo do que foi alterado</li> <li>Uma descri\u00e7ao um pouco mais detalhada do que foi modificado</li> </ul> <p>A p\u00f3s isso o sistema ir\u00e1 realizar a avalia\u00e7\u00e3o do seu commit e, se estiver tudo ok, seu c\u00f3digo ser\u00e1 commitado na sua branch.</p> <p>Ativando Pre-commit e Commitzen</p> <p>Para ativar as regras de Pre-commit e o commitzen utilize o seguinte comando: <pre><code>task git-config\n</code></pre> Agora seu projeto exigir\u00e1 que seu c\u00f3digo passe pelas regras de pre-commit e que voc\u00ea utilize commits sem\u00e2ticos.</p>"},{"location":"premissasDocumentacao/","title":"Estruturando corretamente a documenta\u00e7\u00e3o","text":""},{"location":"premissasDocumentacao/#conteudo-da-documentacao","title":"Conte\u00fado da documenta\u00e7\u00e3o","text":"<p>Para a documenta\u00e7\u00e3o ser clara e objetiva na inten\u00e7\u00e3o de informar como seu projeto funciona ela precisa ter alguns pontos importantes:</p> <ul> <li>README.md - O projeto precisa ter um arquivo que oriente como o usu\u00e1rio deve fazer o setup inicial do projeto para rodar o mesmo na sua m\u00e1quina</li> <li>Layout do projeto - A documenta\u00e7\u00e3o precisa apresentar um template de como os arquivos do projeto est\u00e3o dispostos, bem como uma breve descri\u00e7\u00e3o de cada arquivo (pode-se utilzar das docstrings)</li> <li>Fluxo de Processo - \u00c9 necess\u00e1rio apresentar um diagrama do fluxo de processo do seu projeto, seja ele um pipeline, uma automa\u00e7\u00e3o, etc.. \u00e9 importante at\u00e9 para exemplificar o projeto para usu\u00e1rios n\u00e3o t\u00e9cnicos</li> <li>Detalhamento do c\u00f3digo - Em projetos mais complexos pode se fazer necess\u00e1rio descrever com mais clareza as fun\u00e7\u00f5es, classes, m\u00e9todos ou atributos utilizados no desenvolvimento, dessa maneira vc precisar\u00e1 apont\u00e1-los tamb\u00e9m na documenta\u00e7\u00e3o</li> </ul> <p>Documentando c\u00f3digo</p> <p>Mantenha as <code>docstrings</code> do seu projeto estruturadas corretamente para que a lib <code>mkdocstrings</code> possa puxar seu c\u00f3digo de maneira autom\u00e1tica para a documenta\u00e7\u00e3o! (Mais detalhes na se\u00e7\u00e3o de dicas!)</p>"},{"location":"premissasDocumentacao/#dicas-de-documentacao","title":"Dicas de documenta\u00e7\u00e3o","text":"<p>Para facilitar a constru\u00e7\u00e3o de uma documenta\u00e7\u00e3o clara e objetiva, voc\u00ea pode utilizar algumas libs ja inclusas nesse projeto!</p>"},{"location":"premissasDocumentacao/#mermaid","title":"Mermaid","text":"<p>O <code>Mermaid</code> \u00e9 uma linguagem de marca\u00e7\u00e3o b\u00e1sica baseada em <code>JavaScript</code> que permite que voc\u00ea crie diagramas f\u00e1cilmente em arquivos .md!</p> <p>Exemplo:</p> <pre><code>```mermaid\n    flowchart LR\n        subgraph pipeline[Exemplo]\n            A[IN\u00cdCIO] --&gt; |Usar a criatividade!| B(Crie seu diagrama!)\n            B --&gt; C(Beba \u00e1gua!)\n            C --&gt; D(Fa\u00e7a exerc\u00edcios!)\n\n    end\n```\n</code></pre> <p>Resultado:</p> <p><pre><code>        flowchart LR\n            subgraph pipeline[Exemplo]\n                A[IN\u00cdCIO] --&gt; |Usar a criatividade!| B(Crie seu diagrama!)\n                B --&gt; C(Beba \u00e1gua!)\n                C --&gt; D(Fa\u00e7a exerc\u00edcios!)\n\n     end</code></pre> Voc\u00ea tamb\u00e9m pode utilizar outros tipos de formatos de diagramas! Consulte a documenta\u00e7\u00e3o do Mermaid aqui.</p> <p>Testando diagramas</p> <p>O mermaid tamb\u00e9m possui um site onde voc\u00ea pode criar seus diagramas em tempo real! Acesse aqui.</p>"},{"location":"premissasDocumentacao/#admonition","title":"Admonition","text":"<p>O admonition \u00e9 um jeito elegante de adicionar informa\u00e7\u00f5es na sua documenta\u00e7\u00e3o!</p> <p>Exemplo:</p> <pre><code>!!! tip \"Crie Dicas!\"\n    Este tipo de insert facilita a orienta\u00e7\u00e3o dos usu\u00e1rios!\n</code></pre> <p>Resultado:</p> <p>Crie Dicas!</p> <p>Este tipo de insert facilita a orienta\u00e7\u00e3o dos usu\u00e1rios!</p> <p>Existem v\u00e1rios tipos de inserts com admonition que podem ser utilizados! Consulte aqui a documenta\u00e7\u00e3o para saber mais!</p>"},{"location":"premissasDocumentacao/#mkdocstrings","title":"Mkdocstrings","text":"<p>O mkdocstrings \u00e9 um jeito f\u00e1cil de documentar seu c\u00f3digo referenciando ele diretamente da fonte! basta apontar o caminho do c\u00f3digo e o plugin exibe um display completo do seu c\u00f3digo</p> <p>Exemplo:</p> <pre><code>::: tests.unity_test    #Referenciando o arquivo de testes unit\u00e1rios localizado em: tests/unity_test.py\n</code></pre> <p>Resultado:</p> <p>Utilize esse arquivo para colocar os testes unit\u00e1rios do projeto.</p> <p>Padronizando docstrings</p> <p>O <code>mkdocstrings</code> utiliza as suas declara\u00e7\u00f5es de docstrings nas fun\u00e7\u00f5es para montar a documenta\u00e7\u00e3o, declare corretamente os argumentos e retornos nas fun\u00e7\u00f5es para criar uma documenta\u00e7\u00e3o mais coesa.</p>"},{"location":"premissasDocumentacao/#tests.unity_test.test_placeHolder","title":"<code>test_placeHolder()</code>","text":"<p>Teste criado apenas como placeholder.</p> Source code in <code>tests\\unity_test.py</code> <pre><code>def test_placeHolder():\n    \"\"\"Teste criado apenas como placeholder.\"\"\"\n    teste = 1\n    assert teste == 1\n</code></pre>"}]}